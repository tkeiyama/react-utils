"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTheme = exports.ThemeProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const defaultThemeContextValue = {
    theme: "light",
    changeTheme: () => { },
};
const ThemeContext = (0, react_1.createContext)(defaultThemeContextValue);
const switchTheme = (theme) => {
    return theme === "light" ? "dark" : "light";
};
/**
 * A React provider component to give an application the theme.
 *
 * @param defaultTheme which provided to an application as the default theme. The default is `light`
 */
const ThemeProvider = ({ children, defaultTheme = "light" }) => {
    const [currentTheme, setTheme] = (0, react_1.useState)(defaultTheme);
    (0, react_1.useEffect)(() => {
        const localStorageTheme = localStorage.getItem("app-theme");
        if (localStorageTheme) {
            setTheme(localStorageTheme);
        }
        else {
            localStorage.setItem("app-theme", currentTheme);
        }
    }, []);
    (0, react_1.useEffect)(() => {
        if (typeof window !== "undefined") {
            const html = document.querySelector("html");
            if (html) {
                const className = html.className.trim();
                if (className === "" || className === "light" || className === "dark") {
                    html.className = currentTheme;
                }
                else {
                    const newClassName = className.split(" ").map((cn) => {
                        return cn === "light" || cn === "dark" ? switchTheme(cn) : cn;
                    }).join(" ");
                    html.className = newClassName;
                }
            }
        }
    }, [currentTheme]);
    const changeTheme = (theme) => {
        if (theme) {
            localStorage.setItem("app-theme", theme);
            setTheme(theme);
        }
        else {
            const targetTheme = currentTheme === "light" ? "dark" : "light";
            localStorage.setItem("app-theme", targetTheme);
            setTheme(targetTheme);
        }
    };
    const value = {
        theme: currentTheme,
        changeTheme,
    };
    return (0, jsx_runtime_1.jsx)(ThemeContext.Provider, { value: value, children: children });
};
exports.ThemeProvider = ThemeProvider;
/**
 * A react hook returns `theme` and `changeTheme`.
 *
 * This function won't work unless you wrap component(s) by the `ThemeProvider` component.
 */
const useTheme = () => (0, react_1.useContext)(ThemeContext);
exports.useTheme = useTheme;
